diff --git a/src/App.tsx b/src/App.tsx
index 0b9d05c..29ab797 100644
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -1,4 +1,4 @@
-import React, { useState } from 'react';
+import React, { useState, useEffect } from 'react';
 import { GameProvider } from './context/GameContext';
 import { LocationProvider } from './context/LocationContext';
 import { Game } from './pages/Game';
@@ -7,11 +7,25 @@ import NavigationMenu from './components/navigation/NavigationMenu';
 import { ComingSoon } from './components/modals/ComingSoon';
 import { Screen } from './types/navigation';
 import DevicePermissionsHandler from './components/permissions/DevicePermissionsHandler';
+import { adManager } from './services/AdManager';
 
 const App = () => {
   const [currentScreen, setCurrentScreen] = useState<Screen>('game');
   const [showComingSoon, setShowComingSoon] = useState(false);
 
+  useEffect(() => {
+    // Initialize AdManager when app starts
+    try {
+      if (process.env.NODE_ENV === 'production') {
+        console.log('Initializing AdManager in production mode');
+        // AdManager will self-initialize through getInstance
+        adManager.isSupported();
+      }
+    } catch (error) {
+      console.error('Error initializing AdManager:', error);
+    }
+  }, []);
+
   const handleScreenChange = (screen: Screen) => {
     if (screen === 'game' || screen === 'map') {
       setCurrentScreen(screen);
@@ -38,13 +52,11 @@ const App = () => {
           <div className="h-screen w-screen overflow-hidden bg-game-dark flex flex-col">
             {/* Main content area */}
             <div className="flex-1 relative">{renderScreen()}</div>
-
             {/* Navigation */}
             <NavigationMenu
               currentScreen={currentScreen}
               onScreenChange={handleScreenChange}
             />
-
             {/* Modals */}
             {showComingSoon && (
               <ComingSoon onClose={() => setShowComingSoon(false)} />
diff --git a/src/components/ar/ARView.tsx b/src/components/ar/ARView.tsx
index 5ec2e6f..737f0a8 100644
--- a/src/components/ar/ARView.tsx
+++ b/src/components/ar/ARView.tsx
@@ -17,7 +17,6 @@ const ARView: React.FC<ARViewProps> = ({ drones = [], onDroneShoot }) => {
   const cameraRef = useRef<THREE.PerspectiveCamera>();
   const controlsRef = useRef<DeviceOrientationControls>();
   const animationFrameIdRef = useRef<number>();
-  const { heading } = useLocationContext();
 
   useEffect(() => {
     if (!containerRef.current) return;
diff --git a/src/components/modals/RewardAdModal.tsx b/src/components/modals/RewardAdModal.tsx
new file mode 100644
index 0000000..20a50fe
--- /dev/null
+++ b/src/components/modals/RewardAdModal.tsx
@@ -0,0 +1,61 @@
+import React from 'react';
+import { adManager } from '../../services/AdManager';
+
+interface RewardAdModalProps {
+  type: 'ammo' | 'lives';
+  onClose: () => void;
+  onReward: () => void;
+}
+
+const RewardAdModal = ({ type, onClose, onReward }: RewardAdModalProps) => {
+  const handleWatchAd = async () => {
+    console.log('Watch Ad clicked');
+    const success = await adManager.showRewardAd(onReward);
+    if (success) {
+      console.log('Ad completed successfully');
+      onClose();
+    }
+  };
+
+  const handleNoThanks = () => {
+    console.log('No Thanks clicked');
+    // Make sure we're actually calling onClose
+    if (onClose) {
+      onClose();
+      console.log('onClose called from No Thanks handler');
+    } else {
+      console.warn('onClose is not defined');
+    }
+  };
+
+  return (
+    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 pointer-events-auto">
+      <div className="bg-game-dark border-2 border-game-primary rounded-lg p-6 max-w-md mx-4 text-center">
+        <h2 className="text-2xl font-bold text-white mb-4">
+          {type === 'ammo' ? 'Out of Ammo!' : 'Out of Lives!'}
+        </h2>
+        <p className="text-gray-300 mb-6">
+          {type === 'ammo'
+            ? 'Watch a short ad to instantly reload your weapon!'
+            : 'Watch a short ad to instantly respawn!'}
+        </p>
+        <div className="flex justify-center space-x-4">
+          <button
+            onClick={handleWatchAd}
+            className="px-6 py-2 bg-game-primary text-white rounded-lg hover:bg-opacity-90 transition-colors"
+          >
+            Watch Ad
+          </button>
+          <button
+            onClick={handleNoThanks}
+            className="px-6 py-2 bg-gray-600 text-white rounded-lg hover:bg-opacity-90 transition-colors"
+          >
+            No Thanks
+          </button>
+        </div>
+      </div>
+    </div>
+  );
+};
+
+export default RewardAdModal;
diff --git a/src/context/GameContext.tsx b/src/context/GameContext.tsx
index 197f7a3..2ee194d 100644
--- a/src/context/GameContext.tsx
+++ b/src/context/GameContext.tsx
@@ -41,6 +41,7 @@ interface GameState {
   };
   heading: number;
   pushToken: null;
+  showAdModal: 'ammo' | 'lives' | null;
 }
 
 interface GameContextType extends GameState {
@@ -49,6 +50,8 @@ interface GameContextType extends GameState {
   startGame: () => void;
   endGame: () => void;
   updateGameScore: (action: GameScoreAction) => void;
+  handleAdReward: () => void;
+  closeAdModal: () => void;
 }
 
 const GameContext = createContext<GameContextType | undefined>(undefined);
@@ -69,6 +72,7 @@ const INITIAL_STATE: GameState = {
   location: { latitude: 0, longitude: 0, altitude: 0, accuracy: 0 },
   heading: 0,
   pushToken: null,
+  showAdModal: null,
 };
 
 const RELOAD_TIME = 3000;
@@ -116,6 +120,7 @@ const calculateDamage = (
 };
 
 // MARK: - Game Provider
+
 export const GameProvider: React.FC<{ children: React.ReactNode }> = ({
   children,
 }) => {
@@ -216,7 +221,18 @@ export const GameProvider: React.FC<{ children: React.ReactNode }> = ({
   const handleHit = useCallback((damage: number) => {
     setState((prev) => {
       const newLives = Math.max(0, prev.currentLives - damage);
+      // Show ad modal if player dies
       if (newLives === 0) {
+        return {
+          ...prev,
+          currentLives: newLives,
+          isAlive: false,
+          showAdModal: 'lives',
+        };
+      }
+
+      // Normal respawn timer if ad is declined
+      if (newLives === 0 && !prev.showAdModal) {
         setTimeout(() => {
           setState((prev) => ({
             ...prev,
@@ -225,6 +241,7 @@ export const GameProvider: React.FC<{ children: React.ReactNode }> = ({
           }));
         }, RESPAWN_TIME);
       }
+
       return {
         ...prev,
         currentLives: newLives,
@@ -295,21 +312,10 @@ export const GameProvider: React.FC<{ children: React.ReactNode }> = ({
       // When WebSocket connects, send join message
       if (message.type === MessageType.WEBSOCKET_CONNECTED) {
         try {
-          const playerLocation = location
-            ? location
-            : await locationService.getCurrentLocation();
-          console.log('Location for join message:', location);
-
           const joinMessage: GameMessage = {
             type: MessageType.JOIN,
             playerId: state.playerId!,
             data: {
-              location: {
-                latitude: playerLocation.latitude,
-                longitude: playerLocation.longitude,
-                altitude: playerLocation.altitude,
-                accuracy: playerLocation.accuracy,
-              },
               playerId: state.playerId,
               kind: 'player',
               heading: 0,
@@ -354,27 +360,7 @@ export const GameProvider: React.FC<{ children: React.ReactNode }> = ({
         case MessageType.DRONE_SHOOT_CONFIRMED:
           // if (message.data.playerId == state.playerId) {
           const reward = message.data.reward || 2;
-          // Show a message like '2 SHOT' for 1 sec and fade out, the position for the message 10px above the crosshairs
-          const messageElement = document.createElement('div');
-          messageElement.textContent = `${reward} SHOT`;
-          messageElement.style.position = 'absolute';
-          messageElement.style.top = 'calc(33% - 60px)';
-          messageElement.style.left = '50%';
-          messageElement.style.transform = 'translate(-50%, -50%)';
-          messageElement.style.color = 'red';
-          messageElement.style.fontSize = '32px';
-          messageElement.style.fontWeight = 'bold';
-          messageElement.style.opacity = '1';
-          messageElement.style.transition = 'opacity 1s ease-out';
-
-          document.body.appendChild(messageElement);
-
-          setTimeout(() => {
-            messageElement.style.opacity = '0';
-            setTimeout(() => {
-              document.body.removeChild(messageElement);
-            }, 1000);
-          }, 1000);
+          showReward(reward);
           // }
           break;
 
@@ -475,6 +461,37 @@ export const GameProvider: React.FC<{ children: React.ReactNode }> = ({
     [state, location, handleShot, resetDroneTimer, handleHit]
   );
 
+  // MARK: - showReward
+  interface ShowReward {
+    (reward: number): void;
+  }
+
+  const showReward: ShowReward = (reward) => {
+    // Show a message like '2 SHOT' for 1 sec and fade out, the position for the message 10px above the crosshairs
+    const messageElement = document.createElement('div');
+    messageElement.textContent = `${reward} SHOT`;
+    messageElement.style.position = 'absolute';
+    messageElement.style.top = 'calc(33% - 60px)';
+    messageElement.style.left = '50%';
+    messageElement.style.transform = 'translate(-50%, -50%)';
+    messageElement.style.color = 'red';
+    messageElement.style.fontSize = '32px';
+    messageElement.style.fontWeight = 'bold';
+    messageElement.style.opacity = '1';
+    messageElement.style.transition = 'opacity 1s ease-out';
+
+    document.body.appendChild(messageElement);
+
+    setTimeout(() => {
+      messageElement.style.opacity = '0';
+      setTimeout(() => {
+        document.body.removeChild(messageElement);
+      }, 1000);
+    }, 1000);
+  };
+
+  // MARK: - temporary id
+
   useEffect(() => {
     if (!state.playerId) {
       const playerId = generateTemporaryId();
@@ -482,6 +499,8 @@ export const GameProvider: React.FC<{ children: React.ReactNode }> = ({
     }
   }, [state.playerId]);
 
+  // MARK: - socket connection
+
   useEffect(() => {
     if (!state.playerId || wsInstanceRef.current) {
       return; // Don't proceed if we don't have playerId or already have a connection
@@ -506,8 +525,77 @@ export const GameProvider: React.FC<{ children: React.ReactNode }> = ({
     // };
   }, [state.playerId, handleGameMessage]);
 
+  // MARK: - handleAdReward
+
+  const handleAdReward = useCallback(() => {
+    switch (state.showAdModal) {
+      case 'ammo':
+        setState((prev) => ({
+          ...prev,
+          currentAmmo: prev.maxAmmo,
+          isReloading: false,
+          showAdModal: null,
+        }));
+        break;
+      case 'lives':
+        setState((prev) => ({
+          ...prev,
+          currentLives: prev.maxLives,
+          isAlive: true,
+          showAdModal: null,
+        }));
+        break;
+    }
+  }, [state.showAdModal]);
+
+  // MARK: - closeAdModal
+
+  const closeAdModal = useCallback(() => {
+    console.log('Closing ad modal');
+    setState((prev) => ({
+      ...prev,
+      showAdModal: null,
+    }));
+
+    console.log('⏳ Starting reload process');
+    setState((prev) => ({ ...prev, isReloading: true }));
+
+    setTimeout(() => {
+      setState((prev) => ({
+        ...prev,
+        currentAmmo: prev.maxAmmo,
+        isReloading: false,
+      }));
+    }, RELOAD_TIME);
+  }, [state.isReloading, state.currentAmmo]);
+
+  // MARK: reload
+
   const reload = useCallback(() => {
+    console.log('🔄 Reload function called', {
+      currentAmmo: state.currentAmmo,
+      isReloading: state.isReloading,
+      timestamp: new Date().toISOString(),
+    });
+
     if (!state.isReloading) {
+      // Only show ad modal or start reload when ammo is fully depleted
+      if (state.currentAmmo <= 1) {
+        console.log('📉 Zero ammo, showing ad modal');
+        setState((prev) => ({ ...prev, showAdModal: 'ammo' }));
+        return;
+      }
+
+      // Don't start reloading unless ammo is very low (let's say 1 or 0)
+      if (state.currentAmmo > 1) {
+        console.log(
+          '🎯 Sufficient ammo, no need to reload:',
+          state.currentAmmo
+        );
+        return;
+      }
+
+      console.log('⏳ Starting reload process');
       setState((prev) => ({ ...prev, isReloading: true }));
 
       setTimeout(() => {
@@ -518,30 +606,58 @@ export const GameProvider: React.FC<{ children: React.ReactNode }> = ({
         }));
       }, RELOAD_TIME);
     }
-  }, [state.isReloading]);
+  }, [state.isReloading, state.currentAmmo]);
+
+  // MARK: - shoot
 
   const shoot = useCallback(
     (location: LocationData, heading: number) => {
-      if (
-        !state.isAlive ||
-        state.isReloading ||
-        state.currentAmmo <= 0 ||
-        !state.playerId
-      ) {
-        console.log('Shoot blocked:', {
-          isAlive: state.isAlive,
-          isReloading: state.isReloading,
-          currentAmmo: state.currentAmmo,
-        });
+      console.log(
+        '🔫 Shoot function called with current ammo:',
+        state.currentAmmo
+      );
+
+      if (!state.isAlive || !state.playerId) {
+        console.log('❌ Shoot blocked - not alive or no player ID');
+        return;
+      }
+
+      // Check current ammo before decreasing
+      console.log('📊 Pre-shoot ammo check:', {
+        currentAmmo: state.currentAmmo,
+        isReloading: state.isReloading,
+      });
+
+      if (state.currentAmmo <= 0) {
+        console.log('🚫 No ammo left, showing ad modal');
+        setState((prev) => ({ ...prev, showAdModal: 'ammo' }));
+        return;
+      }
+
+      if (state.isReloading) {
+        console.log('⏳ Blocked - currently reloading');
         return;
       }
 
+      // Update ammo count
       setState((prev) => {
-        const newAmmo = Math.max(0, prev.currentAmmo - 1);
-        if (newAmmo <= 0) {
-          reload();
+        const newAmmo = prev.currentAmmo - 1;
+        console.log('🔄 Decreasing ammo', {
+          previous: prev.currentAmmo,
+          new: newAmmo,
+          timestamp: new Date().toISOString(),
+        });
+
+        // Only trigger reload when ammo is critically low
+        if (newAmmo <= 1) {
+          console.log('📉 Low ammo, triggering reload');
+          setTimeout(() => reload(), 0);
         }
-        return { ...prev, currentAmmo: newAmmo };
+
+        return {
+          ...prev,
+          currentAmmo: newAmmo,
+        };
       });
 
       const wsInstance = WebSocketService.getInstance();
@@ -561,9 +677,7 @@ export const GameProvider: React.FC<{ children: React.ReactNode }> = ({
 
       if (location) {
         wsInstance.send(message);
-        console.log('Shoot fired:', shootData);
-      } else {
-        console.log('Shoot not fired, location not present');
+        console.log('✅ Shot fired, message sent');
       }
     },
     [
@@ -598,14 +712,17 @@ export const GameProvider: React.FC<{ children: React.ReactNode }> = ({
     ...state,
     shoot,
     reload,
-    startGame: () => setGameStarted(false),
+    startGame: () => setGameStarted(true),
     endGame: () => setGameStarted(false),
     updateGameScore,
+    handleAdReward,
+    closeAdModal,
   };
 
   return <GameContext.Provider value={value}>{children}</GameContext.Provider>;
 };
 
+// MARK: - generateTemporaryId
 const generateTemporaryId = () => {
   const storedId = localStorage.getItem('playerId');
   if (storedId) {
@@ -627,6 +744,8 @@ const generateTemporaryId = () => {
   return newId;
 };
 
+// MARK: - useGameContext
+
 export const useGameContext = () => {
   const context = useContext(GameContext);
   if (!context) {
diff --git a/src/pages/Game.tsx b/src/pages/Game.tsx
index 35dd378..bf42ced 100644
--- a/src/pages/Game.tsx
+++ b/src/pages/Game.tsx
@@ -7,6 +7,7 @@ import ARView from '../components/ar/ARView';
 import Crosshair from '../components/game/Crosshair';
 import StatusBar from '../components/game/StatusBar';
 import GameStatus from '../components/game/GameStatus';
+import RewardAdModal from '../components/modals/RewardAdModal';
 import { WebSocketService } from '../services/WebSocketService';
 import { MessageType } from '../types/game';
 
@@ -23,20 +24,21 @@ export const Game = () => {
     gameScore,
     shoot,
     updateGameScore,
+    showAdModal,
+    handleAdReward,
+    closeAdModal,
   } = useGameContext();
-  const { location, heading } = useLocationContext();
+
+  const { location } = useLocationContext();
 
   // Keep track of other players for debugging/monitoring
   const otherPlayers = React.useMemo(() => {
     return players.filter((player) => player.playerId !== playerId);
   }, [players, playerId]);
 
-  // MARK: - handleDroneHit
-
   const handleDroneHit = useCallback(
     (droneId: string) => {
       console.log('Drone hit:', droneId);
-      // Send WebSocket message for drone hit
       const wsService = WebSocketService.getInstance();
       wsService.send({
         type: MessageType.SHOOT_DRONE,
@@ -52,27 +54,14 @@ export const Game = () => {
         },
       });
 
-      // Update local game score
       updateGameScore({
         type: 'DRONE_HIT',
         droneId: droneId,
       });
-
-      // Trigger shoot animation and sound
-      // shoot(location, heading);
     },
-    [location, heading, playerId, updateGameScore, shoot]
+    [playerId, updateGameScore]
   );
 
-  React.useEffect(() => {
-    console.log('Game component - Update:', {
-      totalPlayers: players.length,
-      otherPlayers: otherPlayers.length,
-      currentPlayerId: playerId,
-      activeDrones: drones.length,
-    });
-  }, [players, otherPlayers, playerId, drones]);
-
   return (
     <div className="relative h-screen w-full overflow-hidden">
       {/* Base layer - Camera */}
@@ -118,6 +107,22 @@ export const Game = () => {
             Reloading...
           </div>
         )}
+
+        {/* Ad Modal */}
+        {/* Ad Modal */}
+        {showAdModal && (
+          <RewardAdModal
+            type={showAdModal}
+            onClose={() => {
+              console.log('Modal close requested');
+              closeAdModal();
+            }}
+            onReward={() => {
+              console.log('Reward requested');
+              handleAdReward();
+            }}
+          />
+        )}
       </div>
     </div>
   );
diff --git a/src/services/AdManager.ts b/src/services/AdManager.ts
new file mode 100644
index 0000000..5c8ef87
--- /dev/null
+++ b/src/services/AdManager.ts
@@ -0,0 +1,167 @@
+// src/services/AdManager.ts
+
+declare global {
+  interface Window {
+    adsbygoogle: any[];
+    google: any;
+  }
+}
+
+interface AdSenseConfig {
+  google_ad_client: string | undefined;
+  google_ad_slot: string | undefined;
+  type: 'reward';
+  reward_callback: (reward: any) => void;
+  ad_error_callback: (error: any) => void;
+}
+
+export class AdManager {
+  private static instance: AdManager;
+  private adContainer: HTMLDivElement | null = null;
+  private isAdLoaded: boolean = false;
+  private onRewardCallback: (() => void) | null = null;
+  private isInitialized: boolean = false;
+
+  private constructor() {
+    if (typeof window !== 'undefined' && !this.isInitialized) {
+      this.initializeAds();
+    }
+  }
+
+  static getInstance(): AdManager {
+    if (!AdManager.instance) {
+      AdManager.instance = new AdManager();
+    }
+    return AdManager.instance;
+  }
+
+  private initializeAds() {
+    if (this.isInitialized) return;
+
+    // Add the Google AdSense script if it's not already present
+    if (
+      !document.querySelector('script[src*="pagead2.googlesyndication.com"]')
+    ) {
+      const script = document.createElement('script');
+      script.src = `https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=${process.env.REACT_APP_ADSENSE_CLIENT_ID}`;
+      script.async = true;
+      script.crossOrigin = 'anonymous';
+
+      script.onload = () => {
+        console.log('🎯 AdSense script loaded successfully');
+        // Initialize adsbygoogle array only once
+        window.adsbygoogle = window.adsbygoogle || [];
+      };
+
+      script.onerror = (error) => {
+        console.error('❌ Error loading AdSense script:', error);
+      };
+
+      document.head.appendChild(script);
+    }
+
+    this.createAdContainer();
+    this.isInitialized = true;
+  }
+
+  private createAdContainer() {
+    if (!this.adContainer) {
+      this.adContainer = document.createElement('div');
+      this.adContainer.id = 'reward-ad-container';
+      this.adContainer.style.display = 'none';
+      this.adContainer.style.position = 'fixed';
+      this.adContainer.style.top = '50%';
+      this.adContainer.style.left = '50%';
+      this.adContainer.style.transform = 'translate(-50%, -50%)';
+      this.adContainer.style.zIndex = '9999';
+      this.adContainer.style.backgroundColor = 'rgba(0, 0, 0, 0.8)';
+      this.adContainer.style.padding = '20px';
+      this.adContainer.style.borderRadius = '8px';
+      document.body.appendChild(this.adContainer);
+    }
+  }
+
+  async showRewardAd(onReward: () => void): Promise<boolean> {
+    console.log('🎮 Attempting to show reward ad');
+
+    if (!this.adContainer || !window.adsbygoogle) {
+      console.error('❌ Ad container or AdSense not initialized');
+      return false;
+    }
+
+    return new Promise((resolve) => {
+      this.onRewardCallback = onReward;
+      this.adContainer!.style.display = 'block';
+
+      const adUnit = document.createElement('ins');
+      adUnit.className = 'adsbygoogle';
+      adUnit.style.display = 'block';
+      adUnit.style.width = '300px';
+      adUnit.style.height = '250px';
+      adUnit.dataset.adClient = process.env.REACT_APP_ADSENSE_CLIENT_ID;
+      adUnit.dataset.adSlot = process.env.REACT_APP_ADSENSE_REWARD_SLOT;
+      adUnit.dataset.adFormat = 'reward';
+
+      this.adContainer!.innerHTML = '';
+      this.adContainer!.appendChild(adUnit);
+
+      try {
+        const adConfig: AdSenseConfig = {
+          google_ad_client: process.env.REACT_APP_ADSENSE_CLIENT_ID,
+          google_ad_slot: process.env.REACT_APP_ADSENSE_REWARD_SLOT,
+          type: 'reward',
+          reward_callback: (reward) => {
+            console.log('🎁 Reward granted:', reward);
+            this.handleReward();
+            resolve(true);
+            this.hideAd();
+          },
+          ad_error_callback: (error) => {
+            console.error('❌ Ad error:', error);
+            this.hideAd();
+            resolve(false);
+          },
+        };
+
+        // Push only the reward ad configuration
+        window.adsbygoogle.push(adConfig);
+
+        this.isAdLoaded = true;
+        console.log('✅ Ad request pushed successfully');
+      } catch (error) {
+        console.error('❌ Error loading reward ad:', error);
+        this.hideAd();
+        resolve(false);
+      }
+    });
+  }
+
+  private handleReward() {
+    if (this.onRewardCallback) {
+      this.onRewardCallback();
+      this.onRewardCallback = null;
+    }
+  }
+
+  private hideAd() {
+    if (this.adContainer) {
+      this.adContainer.style.display = 'none';
+      this.adContainer.innerHTML = '';
+    }
+    this.isAdLoaded = false;
+  }
+
+  destroy() {
+    if (this.adContainer) {
+      document.body.removeChild(this.adContainer);
+      this.adContainer = null;
+    }
+    this.isInitialized = false;
+  }
+
+  isSupported(): boolean {
+    return typeof window !== 'undefined' && Array.isArray(window.adsbygoogle);
+  }
+}
+
+export const adManager = AdManager.getInstance();
diff --git a/src/types/ad.d.ts b/src/types/ad.d.ts
new file mode 100644
index 0000000..85d3702
--- /dev/null
+++ b/src/types/ad.d.ts
@@ -0,0 +1,35 @@
+// src/types/ad.d.ts
+
+export {};
+
+declare global {
+  interface RewardedAd {
+    type: string;
+    amount: string;
+  }
+
+  interface AdBreak {
+    reward?: RewardedAd;
+    breakStatus: 'success' | 'error' | 'timeout';
+    breakType: 'reward';
+  }
+
+  interface AdSenseConfig {
+    type?: 'reward';
+    params?: {
+      tagForChildDirectedTreatment?: number;
+    };
+    reward_callback?: (reward: RewardedAd | undefined) => void;
+    ad_error_callback?: (error: Error) => void;
+    google_ad_client?: string;
+    enable_page_level_ads?: boolean;
+    overlays?: { bottom: boolean };
+    google_ad_slot?: string;
+    google_ad_format?: string;
+  }
+
+  // The key change is here in the Window interface
+  interface Window {
+    adsbygoogle: AdSenseConfig[];
+  }
+}
diff --git a/src/types/game.ts b/src/types/game.ts
index 21befec..67d6593 100644
--- a/src/types/game.ts
+++ b/src/types/game.ts
@@ -8,7 +8,7 @@ export type LocationData = {
 
 export type Player = {
   playerId: string;
-  location: LocationData;
+  location?: LocationData;
   heading: number;
 };
 
diff --git a/src/types/google-adsense.d.ts b/src/types/google-adsense.d.ts
new file mode 100644
index 0000000..e630c5e
--- /dev/null
+++ b/src/types/google-adsense.d.ts
@@ -0,0 +1,16 @@
+// src/types/google-adsense.d.ts
+
+interface InsElement extends HTMLElement {
+  className: 'adsbygoogle';
+  dataset: {
+    adClient: string;
+    adSlot: string;
+    adFormat: string;
+  };
+}
+
+declare namespace google {
+  namespace adsense {
+    function push(element: InsElement): void;
+  }
+}
